#!/usr/bin/env perl
use strict;
use warnings 'all';

#Crypt/Rijndae is required to use AES as privacy protocol with snmpv3
use Net::SNMP qw/:debug :snmp/;
use Monitoring::Plugin;

use attributes;
use Scalar::Util 'refaddr';

our $VERSION = '0.01';

# BEGIN DEBUGGING FEATURES #####################################################
my %attrs;

sub MODIFY_CODE_ATTRIBUTES {
  my ($package, $code, @attrs) = @_;
  $attrs{refaddr $code} = \@attrs;
  return;
}

sub FETCH_CODE_ATTRIBUTES {
  my ($package, $code) = @_;
  my $decorators = $attrs{ refaddr $code };
  defined $decorators ? @$decorators : ();
}

#Iterate through symbols to inject printing of function name to make debug easier
{
  no strict;
  no warnings;
  sub inject_debugging($) {
    my $ng = shift;
    if ($ng->opts->verbose >= 2) {
      for my $e (%main::) {
        if ( $e !~ /^\*main/ && defined &{$e} ) {
          if ( grep { $_ eq 'Debug' } attributes::get(\&{$e}) ) {
            my $sub = \&{'main::' . $e};
            *{'main::' . $e} = sub {
              _debug($e);
              &$sub;
            };
          }
        }
      }
    }
  }
}

sub _debug {
  my ($msg) = @_;
  printf STDERR "%s\n", $msg;
}

# END OF DEBUGGING FEATURES ####################################################
# 
my @HEALTH = ('ONLINE', 'DEGRADED', 'FAULTED', 'OFFLINE', 'UNAVAIL', 'REMOVED');
use constant {
  FREENAS_MIB_zpoolDescr => '1.3.6.1.4.1.50536.1.1.1.1.2',
  FREENAS_MIB_zpoolHealth => '1.3.6.1.4.1.50536.1.1.1.1.7',
  SNMPV3_REQUIRED_OPTS  => [
    'secname', 'authpassword', 'privpasswd', 'authproto', 'privproto',
  ],
};

#close snmp session if open
sub _die :Debug {
  my ($session, $ng, $msg) = @_;
  if (!defined $msg) {
    $msg = defined($session)
      ? $session->error()
      : "unable to open snmp session";
  }
  $session->close() if defined($session);
  $ng->plugin_die($msg);
}

sub _examples {
<<EOF;

Notes:
  To use 'AES' SNMPv3 privacy protocol Crypt/Rijndae perlmod installation is
  required on the running host.
  Use '-vvv' debugging to troubleshoot any SNMPv3 encountered communication
  problems.

  According to FREENAS_MIB, managed zpool health types are:
    online(0),
    degraded(1),
    faulted(2),
    offline(3),
    unavail(4),
    removed(5)

  Thresholds are managed according to these values.
  Then use of '-w 0' will throw WARNING only if health value is greater than 0.
  It means WARNING will be raised if zpool status is 'degraded' or worst 
  (faulted, offline, unavail, removed).

Examples:
  CHECK ZPOOL HEALTH WITH SNMPv2: check_freenas_zpool_health -H myfreenas.example.com -z raid -w 0 -c 1 -C public

  Check the zpool named 'raid' from myfreenas.example.com by using 'public'
  community and raise warnings if 'raid' zpool status is greater than "ONLINE"
  (0) and critical if greater than "DEGRADED" (1).

  CHECK ZPOOL HEALTH WITH SNMPv3: check_freenas_zpool_health -H myfreenas.example.com -z raid -w 0 -c 1 -U myuser -A mqlkdqfmLIHMOyçè67sdf -X yYOOJMohimoç96e283 -a SHA -x AES

  Check the zpool named 'raid' from myfreenas.example.com by using 'myuser'
  user, 'mqlkdqfmLIHMOyçè67sdf' authentication password, 'yYOOJMohimoç96e283'
  private password, 'SHA' authentication protocol, 'AES' privacy protocol,
  and raise warnings if 'raid' zpool status is greater than "ONLINE"
  (0) and critical if greater than "DEGRADED" (1).

Debugging:
  -vv option will display the executed method while running the plugin
  -vvv option will also display all the SNMP dialog managed by Net::SNMP
EOF
}

sub _license {
<<EOF
LICENSE AND COPYRIGHT

Copyright (C) 2018 Thomas Cazali

This program is distributed under the (Simplified) BSD License:
L<http://www.opensource.org/licenses/BSD-2-Clause>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOF
}

sub getopts {
  my $ng= Monitoring::Plugin->new(
    shortname => "freenas_zpool_health",
    usage => "Usage: %s -H <host> -C <community> -z <zpool> "
      . "-w <warning> -c <critical> -t <timeout> "
      . "[-U <secname> -A <authpassword> -X <privpasswd> "
      . "-a <authproto> -x <privproto>]",
    version => $VERSION,
    url => 'https://github.com/freenas-monitoring-plugins/check_freenas_zpool_health',
    blurb => 'This plugin uses FREENAS-MIB to query zpool health with SNMPv2c or SNMPv3',
    license => _license(),
    extra => _examples(),
    
  );
 
  _get_opt_critical($ng);
  _get_opt_community($ng);
  _get_opt_hostname($ng);
  _get_opt_warning($ng);
  _get_opt_zpool($ng);
  _get_opt_username($ng);
  _get_opt_password($ng);
  _get_opt_passphrase($ng);
  _get_opt_auth_type($ng);
  _get_opt_privacy_protocol($ng);
  $ng->getopts;
  $ng;
}

sub _get_opt_community($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'community|C=s',
    help => q(SNMP community),
  );
}

sub _get_opt_critical($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'critical|c=i',
    help => q(Exit with CRITICAL status if type equal INTEGER [0..5]),
    required => 1
  );
}

sub _get_opt_hostname($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'hostname|H=s',
    help => q(Hostname to query - required),
    required => 1
  );
}

sub _get_opt_warning($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'warning|w=i',
    help => q(Exit with WARNING status if equal INTEGER [0..5]),
    required => 1
  );
}

sub _get_opt_zpool($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'zpool|z=s',
    help => q(zpool name),
    required => 1
  );
}

# snmpv3 opts
sub _get_opt_username($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'secname|U=s',
    help => q(SNMPv3 username),
  );
}

sub _get_opt_password($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'authpassword|A=s',
    help => q(SNMPv3 authentication password),
  );
}

sub _get_opt_passphrase($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'privpasswd|X=s',
    help => 'SNMPv3 privacy password (passphrase)',
  );
}

sub _get_opt_auth_type($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'authproto|a=s',
    help => "SNMPv3 authentication proto [MD5|SHA]",
  );
}

sub _get_opt_privacy_protocol($) {
  my $ng = shift;
  $ng->add_arg(
    spec => 'privproto|x=s',
    help => "SNMPv3 privacy protocol [AES|DES]",
  );
}
# end of snmpv3 options

# community is not set required by default because we may use SNMPv3
sub _check_opts_snmpv2c :Debug {
  my $ng = shift;
  if (!defined $ng->opts->community) {
    my $msg = $ng->opts->_usage . "\n";
    $msg .= "Missing argument: community";
    Monitoring::Plugin::Functions::_plugin_exit(3, $msg);
  }
}

sub _check_opts_snmpv3 :Debug {
  my $ng = shift;
  my @missing = ();
  for my $o (@{&SNMPV3_REQUIRED_OPTS}) {
    push(@missing, $o) if !defined $ng->opts->{$o};
  }
  if (@missing) {
    my $msg = $ng->opts->_usage . "\n";
    $msg .= sprintf("Missing argument: %s\n", $_) for @missing;
    Monitoring::Plugin::Functions::_plugin_exit(3, $msg);
  }
}

sub _sprintf_health_accepted :Debug {
  my $msg = "Accepted health values are:\n";
  for my $i (0 .. @HEALTH-1) {
    $msg .= sprintf("%d (%s)\n", $i, $HEALTH[$i]);
  }
  $msg;
}

sub _check_opts_health :Debug {
  my ($ng, $arg) = @_;
  my $value = $ng->opts->{$arg};
  if ($value > @HEALTH-1) {
    my $msg = $ng->opts->_usage . "\n";
    $msg .= sprintf("Unknown health value (%s) for '%s' option.\n", 
      $ng->opts->{$arg}, $arg);
    $msg .= _sprintf_health_accepted();
    Monitoring::Plugin::Functions::_plugin_exit(3, $msg);
  }
}

sub check_opts :Debug {
  my $ng = shift;
  my $snmp_vers = _switch_snmp_version($ng);
  $snmp_vers eq 'snmpv3'
    ? _check_opts_snmpv3($ng)
    : _check_opts_snmpv2c($ng);
  _check_opts_health($ng, 'warning');
  _check_opts_health($ng, 'critical');
}

sub _snmp_debug :Debug {
  my $ng = shift;
  return DEBUG_ALL if $ng->opts->verbose >= 3;
  return DEBUG_NONE;
}

sub _switch_snmp_version :Debug {
  my $ng = shift;
  for my $o (@{SNMPV3_REQUIRED_OPTS()}) {
    return 'snmpv3' if defined $ng->opts->{$o};
  }
  return 'snmpv2c';
}

sub _init_snmpv2c :Debug {
  my $ng = shift;
  my ($session, $error) = Net::SNMP->session(
    -hostname     => $ng->opts->hostname,
    -community    => $ng->opts->community,
    -nonblocking  => 1,
    -translate    => [-octetstring => 0],
    -debug        => _snmp_debug($ng),
    -version      => 'snmpv2c',
    -timeout      => $ng->opts->timeout,
  );

  _die($session, $ng) if (!defined $session);
  $session;
}

sub _init_snmpv3 :Debug {
  my $ng = shift;
  my ($session, $error) = Net::SNMP->session(
    -hostname     => $ng->opts->hostname,
    -nonblocking  => 1,
    -translate    => [-octetstring => 0],
    -debug        => _snmp_debug($ng),
    -version      => 'snmpv3',
    -timeout      => $ng->opts->timeout,
    -username     => $ng->opts->secname,
    -authpassword => $ng->opts->authpassword,
    -authprotocol => $ng->opts->authproto,
    -privpassword => $ng->opts->privpasswd,
    -privprotocol => lc($ng->opts->privproto),
  );

  _die($session, $ng) if (!defined $session);
  $session;
}

sub init_snmp :Debug {
  my $ng = shift;
  my $snmpv = _switch_snmp_version($ng);
  $snmpv eq 'snmpv3' ? _init_snmpv3($ng) : _init_snmpv2c($ng);
}

sub check :Debug {
  my ($ng, $session) = @_;
  _get_zpoolDescr($session, $ng);
  snmp_dispatcher();
}

# hash used to store collected snmp info.
# Avoids to pass a lot of args in cascading called functions.
sub _collected($) :Debug {
  my $index = shift;
  {
    oid_index => $index,
    health => undef,
  };
}

sub _get_zpoolDescr :Debug {
  my ($session, $ng) = @_;
  my $result = $session->get_table(
    -baseoid        => &FREENAS_MIB_zpoolDescr,
    -callback       => [ \&_zpoolDescr_callback, $ng ],
  );

  _die($session, $ng) if (!defined $result);
}

sub _zpoolDescr_callback :Debug {
  my ($session, $ng) = @_;
  my $list = $session->var_bind_list();
  _die($session, $ng) if !defined $list;

  my $oid = undef;
  while (my ($k, $v) = each %$list) {
    if ($v eq $ng->opts->zpool) {
      $oid = $k;
      last;
    }
  }

  if (!defined $oid) {
    _die($session, $ng, sprintf("no zpool descr matches '%s'",
        $ng->opts->zpool));
  }
  my $collected = _collected(chop($oid));
  _get_zpoolHealth($session, $ng, $collected);
}

sub _get_zpoolHealth :Debug {
  my ($session, $ng, $collected) = @_;

  my $result = $session->get_request(
    -varbindlist    => [
      sprintf('%s.%s', &FREENAS_MIB_zpoolHealth, $collected->{oid_index}),
    ],
    -callback       => [ \&_zpoolHealth_callback, $ng, $collected ],
  );

  _die($session, $ng) if !defined $result;
}

# collect the zpool health 
sub _zpoolHealth_callback :Debug {
  my ($session, $ng, $collected) = @_;
  my $list = $session->var_bind_list();
  _die($session, $ng) if !$list;

  my $health = undef;
  for my $v (values %$list) {
    $health = $v;
    last;
  }

  if (!defined $health) {
    _die($session, $ng,
      sprintf("no zpool health matches '%s.%s'", &FREENAS_MIB_zpoolHealth,
        $collected->{oid_index})
    );
  }
  $collected->{health} = $health;
  _check_threshold($ng, $collected);
}

sub _check_threshold :Debug {
  my ($ng, $collected) = @_;
  my $value = $collected->{health};
  $ng->plugin_exit(
    $ng->check_threshold(
      check => $value,
      warning => $ng->opts->warning,
      critical => $ng->opts->critical,
    ),
    sprintf'%s: %s', $ng->opts->zpool, $HEALTH[$collected->{health}]
  );
}

my $ng = getopts();
inject_debugging($ng);
check_opts($ng);
my $session = init_snmp($ng);
check($ng, $session);
